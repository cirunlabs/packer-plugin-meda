name: Build and Push Images

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'images/**'
      - '.github/workflows/build-images.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'images/**'
      - '.github/workflows/build-images.yml'
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Image name to build (leave empty to build all)'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  MEDA_VERSION: v0.3.2
  PACKER_VERSION: 1.10.0

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed images
        id: changes
        run: |
          # Only build ubuntu-base image
          ubuntu_base_dir="ubuntu-base"

          # If specific image requested via workflow_dispatch
          if [ "${{ github.event.inputs.image_name }}" != "" ]; then
            if [ "${{ github.event.inputs.image_name }}" == "ubuntu-base" ]; then
              matrix="[\"ubuntu-base\"]"
              has_changes="true"
            else
              echo "Error: Only 'ubuntu-base' image is supported"
              exit 1
            fi
          # Force rebuild ubuntu-base image
          elif [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
            if [ -d "images/ubuntu-base" ]; then
              matrix="[\"ubuntu-base\"]"
              has_changes="true"
            else
              matrix="[]"
              has_changes="false"
            fi
          # Detect changes for push/PR events - only check ubuntu-base
          else
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              base_sha="${{ github.event.pull_request.base.sha }}"
            else
              base_sha="${{ github.event.before }}"
            fi

            # Check if ubuntu-base directory has changes
            if [ -d "images/ubuntu-base" ]; then
              if git diff --quiet "$base_sha" HEAD -- "images/ubuntu-base/" 2>/dev/null; then
                matrix="[]"
                has_changes="false"
              else
                matrix="[\"ubuntu-base\"]"
                has_changes="true"
              fi
            else
              matrix="[]"
              has_changes="false"
            fi
          fi

          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "has-changes=$has_changes" >> $GITHUB_OUTPUT
          echo "Detected images to build: $matrix"

  build-images:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo usermod -a -G kvm $USER

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-utils \
            genisoimage \
            bridge-utils \
            iptables \
            curl \
            jq \
            qemu-kvm \
            libvirt-daemon-system \
            libvirt-clients

      - name: Download and install Meda
        run: |
          curl -fsSL https://github.com/cirunlabs/meda/releases/download/${{ env.MEDA_VERSION }}/meda_Linux_x86_64.tar.gz -o meda.tar.gz
          tar -xzf meda.tar.gz
          sudo mv meda /usr/local/bin/
          chmod +x /usr/local/bin/meda
          meda --version

      - name: Download and install Packer
        run: |
          curl -fsSL https://releases.hashicorp.com/packer/${{ env.PACKER_VERSION }}/packer_${{ env.PACKER_VERSION }}_linux_amd64.zip -o packer.zip
          unzip packer.zip
          sudo mv packer /usr/local/bin/
          packer version

      - name: Build Packer plugin
        run: |
          cd plugin
          go mod tidy
          go build -o packer-plugin-meda

      - name: Install Packer plugin
        run: |
          cd plugin
          packer plugins install --path packer-plugin-meda github.com/cirunlabs/meda

      - name: Setup Meda environment
        run: |
          # Create meda config directory
          mkdir -p ~/.meda

          # Download required dependencies
          meda --help || true  # This will trigger dependency downloads

      - name: Start Meda API server
        run: |
          # Start Meda API server in background
          meda serve --host 127.0.0.1 --port 7777 &
          sleep 10

          # Verify API is running
          curl -f http://127.0.0.1:7777/api/v1/health || exit 1

      - name: Validate Packer template
        run: |
          cd images/${{ matrix.image }}
          packer validate .

      - name: Check disk space before cleanup
        run: df -h

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Check disk space after cleanup
        run: df -h

      - name: Build image with Packer
        run: |
          cd images/${{ matrix.image }}
          packer build .
        env:
          GITHUB_TOKEN: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}

      - name: Extract image metadata
        id: meta
        run: |
          cd images/${{ matrix.image }}

          # Extract metadata from Packer template
          if [ -f "metadata.json" ]; then
            image_name=$(jq -r '.image_name // "${{ matrix.image }}"' metadata.json)
            image_tag=$(jq -r '.image_tag // "latest"' metadata.json)
            image_description=$(jq -r '.description // ""' metadata.json)
          else
            image_name="${{ matrix.image }}"
            image_tag="latest"
            image_description=""
          fi

          # Add timestamp for development builds
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            timestamp=$(date +%Y%m%d-%H%M%S)
            image_tag="${image_tag}-dev-${timestamp}"
          fi

          full_image_name="${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${image_name}:${image_tag}"

          echo "image-name=${image_name}" >> $GITHUB_OUTPUT
          echo "image-tag=${image_tag}" >> $GITHUB_OUTPUT
          echo "full-image-name=${full_image_name}" >> $GITHUB_OUTPUT
          echo "description=${image_description}" >> $GITHUB_OUTPUT


      - name: Generate build summary
        run: |
          {
            echo "## Image Build Summary"
            echo ""
            echo "- **Image**: ${{ matrix.image }}"
            echo "- **Registry**: ${{ steps.meta.outputs.full-image-name }}"
            echo "- **Description**: ${{ steps.meta.outputs.description }}"
            echo "- **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "- **Git SHA**: ${{ github.sha }}"
            echo ""
            if [ "${{ github.event_name }}" != "pull_request" ]; then
              echo "✅ Image successfully built and pushed to registry"
            else
              echo "✅ Image successfully built (not pushed - PR build)"
            fi
          } >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: |
          # Stop Meda API server
          pkill meda || true

          # Clean up any VMs that might be left over
          meda list --json 2>/dev/null | jq -r '.[].name' | grep -E '^packer-' | xargs -r -I {} meda delete {} || true

          # Clean up temporary images
          meda images list --json 2>/dev/null | jq -r '.[].name' | grep -E 'packer-|temp-' | xargs -r -I {} meda images rm {} || true

  summary:
    needs: [detect-changes, build-images]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.has-changes }}" == "false" ]; then
            echo "ℹ️ No images changed - skipped build" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-images.result }}" == "success" ]; then
            echo "✅ All images built successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-images.result }}" == "failure" ]; then
            echo "❌ Some image builds failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-images.result }}" == "cancelled" ]; then
            echo "⏹️ Build was cancelled" >> $GITHUB_STEP_SUMMARY
          fi
